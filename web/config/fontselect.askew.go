package config

// Code generated by askew. DO NOT EDIT.

import (
	"syscall/js"

	"github.com/QuestScreen/api"
	askew "github.com/flyx/askew/runtime"
)

var αFontSelectTemplate = js.Global().Get("document").Call("createElement", "template")

func init() {
	αFontSelectTemplate.Set("innerHTML", `
	<!--data-->
	<!--handlers-->
	<div class="qs-config-item-fragment">
		<label for="font-family">Family</label>
		<select name="font-family" class="qs-font-families">
			<option></option>
		</select>
	</div>
	<div class="qs-config-item-fragment">
		<label for="font-size">Size</label>
		<select name="font-size" class="qs-font-size">
			<option value="0">Small</option>
			<option value="1">Content</option>
			<option value="2">Medium</option>
			<option value="3">Heading</option>
			<option value="4">Large</option>
			<option value="5">Huge</option>
		</select>
	</div>
	<div class="qs-config-item-fragment">
		<label for="font-style">Style</label>
		<div class="pure-button-group" role="group" aria-label="Font Faces" style="display: inline">
			<button class="pure-button qs-font-style-selector"><i class="fas fa-bold"></i></button>
			<button class="pure-button qs-font-style-selector"><i class="fas fa-italic"></i></button>
		</div>
	</div>
	<div class="qs-config-item-fragment">
		<label for="font-color">Color</label>
		<input type="color" name="font-color" required=""/>
	</div>
`)
}

// FontSelect is a DOM component autogenerated by Askew
type FontSelect struct {
	αcd              askew.ComponentData
	family           askew.IntValue
	familiesDisabled askew.BoolValue
	size             askew.IntValue
	sizeDisabled     askew.BoolValue
	bold             askew.BoolValue
	boldDisabled     askew.BoolValue
	italic           askew.BoolValue
	italicDisabled   askew.BoolValue
	color            askew.StringValue
	colorDisabled    askew.BoolValue
	data             api.Font
	editHandler      EditHandler
}

// FirstNode returns the first DOM node of this component.
// It implements the askew.Component interface.
func (o *FontSelect) FirstNode() js.Value {
	return o.αcd.First()
}

// askewInit initializes the component, discarding all previous information.
// The component is initially a DocumentFragment until it gets inserted into
// the main document. It can be manipulated both before and after insertion.
func (o *FontSelect) askewInit(families []string) {
	o.αcd.Init(αFontSelectTemplate.Get("content").Call("cloneNode", true))

	o.family.BoundValue = askew.NewBoundProperty(&o.αcd, "value", 5, 3)
	o.familiesDisabled.BoundValue = askew.NewBoundProperty(&o.αcd, "disabled", 5, 3)
	o.size.BoundValue = askew.NewBoundProperty(&o.αcd, "value", 7, 3)
	o.sizeDisabled.BoundValue = askew.NewBoundProperty(&o.αcd, "disabled", 7, 3)
	o.bold.BoundValue = askew.NewBoundClasses(&o.αcd, []string{"pure-button-active"}, 9, 3, 1)
	o.boldDisabled.BoundValue = askew.NewBoundProperty(&o.αcd, "disabled", 9, 3, 1)
	o.italic.BoundValue = askew.NewBoundClasses(&o.αcd, []string{"pure-button-active"}, 9, 3, 3)
	o.italicDisabled.BoundValue = askew.NewBoundProperty(&o.αcd, "disabled", 9, 3, 3)
	o.color.BoundValue = askew.NewBoundProperty(&o.αcd, "value", 11, 3)
	o.colorDisabled.BoundValue = askew.NewBoundProperty(&o.αcd, "disabled", 11, 3)
	{
		block := o.αcd.Walk()
		{
			_orig := askew.WalkPath(block, 5, 3, 1)
			_parent := _orig.Get("parentNode")
			_next := _orig.Get("nextSibling")
			_parent.Call("removeChild", _orig)
			for index, name := range families {
				block := _orig.Call("cloneNode", true)

				{
					tmp := askew.BoundPropertyAt(
						askew.WalkPath(block), "value")
					askew.Assign(tmp, index)
				}
				{
					tmp := askew.BoundPropertyAt(
						askew.WalkPath(block), "textContent")
					askew.Assign(tmp, name)
				}
				_parent.Call("insertBefore", block, _next)
			}
		}
	}
	{
		src := o.αcd.Walk(5, 3)
		{
			wrapper := js.FuncOf(func(this js.Value, arguments []js.Value) interface{} {

				go o.edited()
				return nil
			})
			src.Call("addEventListener", "input", wrapper)
		}
	}
	{
		src := o.αcd.Walk(7, 3)
		{
			wrapper := js.FuncOf(func(this js.Value, arguments []js.Value) interface{} {

				go o.edited()
				return nil
			})
			src.Call("addEventListener", "input", wrapper)
		}
	}
	{
		src := o.αcd.Walk(9, 3, 1)
		{
			wrapper := js.FuncOf(func(this js.Value, arguments []js.Value) interface{} {

				go o.toggleBold()
				arguments[0].Call("preventDefault")
				return nil
			})
			src.Call("addEventListener", "click", wrapper)
		}
	}
	{
		src := o.αcd.Walk(9, 3, 3)
		{
			wrapper := js.FuncOf(func(this js.Value, arguments []js.Value) interface{} {

				go o.toggleItalic()
				arguments[0].Call("preventDefault")
				return nil
			})
			src.Call("addEventListener", "click", wrapper)
		}
	}
	{
		src := o.αcd.Walk(11, 3)
		{
			wrapper := js.FuncOf(func(this js.Value, arguments []js.Value) interface{} {

				go o.edited()
				return nil
			})
			src.Call("addEventListener", "input", wrapper)
		}
	}
}

// InsertInto inserts this component into the given object.
// The component will be in inserted state afterwards.
//
// The component will be inserted in front of 'before', or at the end if 'before' is 'js.Undefined()'.
func (o *FontSelect) InsertInto(parent js.Value, before js.Value) {
	o.αcd.DoInsert(parent, before)
}

// Extract removes this component from its current parent.
// The component will be in initial state afterwards.
func (o *FontSelect) Extract() {
	o.αcd.DoExtract()
}

// Destroy destroys this element (and all contained components). If it is
// currently inserted anywhere, it gets removed before.
func (o *FontSelect) Destroy() {
	o.αcd.DoDestroy()
}

// FontSelectList is a list of FontSelect whose manipulation methods auto-update
// the corresponding nodes in the document.
type FontSelectList struct {
	αmgr   askew.ListManager
	αitems []*FontSelect
}

// Init initializes the list, discarding previous data.
// The list's items will be placed in the given container, starting at the
// given index.
func (l *FontSelectList) Init(container js.Value, index int) {
	l.αmgr = askew.CreateListManager(container, index)
	l.αitems = nil
}

// Len returns the number of items in the list.
func (l *FontSelectList) Len() int {
	return len(l.αitems)
}

// Item returns the item at the current index.
func (l *FontSelectList) Item(index int) *FontSelect {
	return l.αitems[index]
}

// Append appends the given item to the list.
func (l *FontSelectList) Append(item *FontSelect) {
	if item == nil {
		panic("cannot append nil to list")
	}
	l.αmgr.Append(item)
	l.αitems = append(l.αitems, item)
	return
}

// Insert inserts the given item at the given index into the list.
func (l *FontSelectList) Insert(index int, item *FontSelect) {
	var prev js.Value
	if index < len(l.αitems) {
		prev = l.αitems[index].αcd.First()
	}
	if item == nil {
		panic("cannot insert nil into list")
	}
	l.αmgr.Insert(item, prev)
	l.αitems = append(l.αitems, nil)
	copy(l.αitems[index+1:], l.αitems[index:])
	l.αitems[index] = item
	return
}

// Remove removes the item at the given index from the list and returns it.
func (l *FontSelectList) Remove(index int) *FontSelect {
	item := l.αitems[index]
	item.Extract()
	copy(l.αitems[index:], l.αitems[index+1:])
	l.αitems = l.αitems[:len(l.αitems)-1]
	return item
}

// Destroy destroys the item at the given index and removes it from the list.
func (l *FontSelectList) Destroy(index int) {
	item := l.αitems[index]
	item.Destroy()
	copy(l.αitems[index:], l.αitems[index+1:])
	l.αitems = l.αitems[:len(l.αitems)-1]
}

// DestroyAll destroys all items in the list and empties it.
func (l *FontSelectList) DestroyAll() {
	for _, item := range l.αitems {
		item.Destroy()
	}
	l.αitems = l.αitems[:0]
}

// OptionalFontSelect is a nillable embeddable container for FontSelect.
type OptionalFontSelect struct {
	αcur *FontSelect
	αmgr askew.ListManager
}

// Init initializes the container to be empty.
// The contained item, if any, will be placed in the given container at the
// given index.
func (o *OptionalFontSelect) Init(container js.Value, index int) {
	o.αmgr = askew.CreateListManager(container, index)
	o.αcur = nil
}

// Item returns the current item, or nil if no item is assigned
func (o *OptionalFontSelect) Item() *FontSelect {
	return o.αcur
}

// Set sets the contained item destroying the current one.
// Give nil as value to simply destroy the current item.
func (o *OptionalFontSelect) Set(value *FontSelect) {
	if o.αcur != nil {
		o.αcur.Destroy()
	}
	o.αcur = value
	if value != nil {
		o.αmgr.Append(value)
	}
}

// Remove removes the current item and returns it.
// Returns nil if there is no current item.
func (o *OptionalFontSelect) Remove() askew.Component {
	if o.αcur != nil {
		ret := o.αcur
		ret.Extract()
		o.αcur = nil
		return ret
	}
	return nil
}
